---
title: "Client Report - Year House Built"
subtitle: "Course DS 250"
author: "Josh LaPointe"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---



## Elevator Pitch

__Still need to work out best way to graph data to find best features for training__






## QUESTION|TASK 1

__Create 2-3 charts that evaluate potential relationships between the home variables and before1980.__




## QUESTION|TASK 2

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.__

```{python}
import sys
import pandas as pd 
import numpy as np
import plotly_express as px
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import metrics
```

```{python}
df = pd.read_csv("https://raw.githubusercontent.com/byuidatascience/data4dwellings/master/data-raw/dwellings_ml/dwellings_ml.csv")

X = df[['basement', 'netprice', 'nocars', 'livearea', 'numbdrm', 'numbaths', 'arcstyle_BI-LEVEL', 'arcstyle_CONVERSIONS','arcstyle_END UNIT', 'arcstyle_MIDDLE UNIT', 'arcstyle_ONE AND HALF-STORY', 'arcstyle_ONE-STORY', 'arcstyle_SPLIT LEVEL', 'arcstyle_THREE-STORY', 'arcstyle_TRI-LEVEL', 'arcstyle_TRI-LEVEL WITH BASEMENT', 'arcstyle_TWO AND HALF-STORY', 'arcstyle_TWO-STORY']]
y = df['yrbuilt']

df = pd.read_csv("https://raw.githubusercontent.com/byuidatascience/data4dwellings/master/data-raw/dwellings_ml/dwellings_ml.csv")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

```

```{python}

decision_tree = tree.DecisionTreeClassifier(max_depth=50)

decision_tree.fit(X_train, y_train)

y_pred_dt = decision_tree.predict(X_test)

accuracy_dt = metrics.accuracy_score(y_test, y_pred_dt)

print(f"Decision Tree Accuracy: {accuracy_dt:.2f}")

```



```{python}

clf = GradientBoostingClassifier(n_estimators=2, learning_rate=0.5)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy_dt = metrics.accuracy_score(y_test, y_pred)

print(f"Decision Tree Accuracy: {accuracy_dt:.2f}")
```

## QUESTION|TASK 3

__Justify your classification model by discussing the most important features selected by your model. This discussion should include a chart and a description of the features.__


## QUESTION|TASK 4

__Describe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.__
